{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-2.js","webpack:///./task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","userName","user","data","table","makeTransaction","min","max","id","canProcess","Math","random","floor","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GAEV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAEzBC,YAAW,WACPF,EAAQF,KACTA,OAILK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,s6BCdjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACH,EAAOI,GAE5B,OAAO,IAAIb,SAAQ,SAAAC,GACf,cAAmBQ,KAAnB,aAA0B,KAAfK,EAAe,QAClBA,EAAKJ,OAASG,IACdC,EAAKH,QAAUG,EAAKH,QAExBV,EAAQQ,QAKdL,EAAS,SAAAW,GAAI,OAAIT,QAAQU,MAAMD,IAGrCH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCtBnC,IAIMa,EAAkB,SAAC,GAAW,IAJDC,EAAKC,EAIbC,EAAS,EAATA,GAEhBC,EAAaC,KAAKC,SAAW,GAC9BzB,GAPyBoB,EAOS,IAPJC,EAOS,IANxCG,KAAKE,MAAMF,KAAKC,UAAYJ,EAAMD,EAAM,GAAKA,IAQnD,OAAO,IAAIlB,SAAQ,SAACC,EAASC,GAEhCC,YAAW,WAGFkB,GACFpB,EAAQ,CAAEmB,KAAIf,KAAMP,IAErBI,EAAOkB,KAERtB,OAIC2B,EAAa,SAAC,GAAe,IAAdL,EAAc,EAAdA,GAAIf,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2Ba,EAA3B,iBAA8Cf,EAA9C,OAIIqB,EAAW,SAACN,GAChBd,QAAQqB,KAAR,gCAA6CP,EAA7C,8BAIFH,EAAgB,CAAEG,GAAI,GAAIQ,OAAQ,MAC/BpB,KAAKiB,GACLI,MAAMH,GAETT,EAAgB,CAAEG,GAAI,GAAIQ,OAAQ,MAC/BpB,KAAKiB,GACLI,MAAMH,GAETT,EAAgB,CAAEG,GAAI,GAAIQ,OAAQ,KAC/BpB,KAAKiB,GACLI,MAAMH,GAETT,EAAgB,CAAEG,GAAI,GAAIQ,OAAQ,MAC/BpB,KAAKiB,GACLI,MAAMH,K","file":"main.a39b36f97f310e300dfa.js","sourcesContent":["const delay = ms => {\r\n\r\n    return new Promise((resolve, reject) => \r\n    {\r\n        setTimeout(() => {\r\n            resolve(ms)\r\n        }, ms)\r\n    })\r\n}\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger); \r\ndelay(1000).then(logger); \r\ndelay(1500).then(logger); ","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (users, userName) => {\r\n\r\n    return new Promise(resolve => {\r\n        for (const user of users) {\r\n            if (user.name === userName) {\r\n                user.active = !user.active;\r\n            }\r\n            resolve(users);\r\n        }\r\n    })\r\n};\r\n\r\nconst logger = data => console.table(data);\r\n\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = ({ id }) => {\r\n  \r\n     const canProcess = Math.random() > 0.3;\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    \r\n   return new Promise((resolve, reject) => {\r\n\r\nsetTimeout(() => {\r\n    \r\n\r\n     if (canProcess) {\r\n       resolve({ id, time: delay });\r\n    }  \r\n      reject(id);\r\n    \r\n  }, delay);\r\n    })\r\n};\r\n\r\nconst logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\n\r\nconst logError = (id) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}